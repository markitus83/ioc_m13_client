
package ioc.femcoworking.view;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import ioc.femcoworking.dto.DTOOficina;
import ioc.femcoworking.dto.DTOReserva;
import ioc.femcoworking.vo.OficinaVO;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.input.DataFormat;
import org.json.JSONObject;
import resources.SimpleDialog;

/**
 * GUI per gestionar el registre de nous usuaris en el sistema
 * 
 * @author Marc Ginovart Vega
 */
public class RegistrarReservaView extends javax.swing.JFrame {
    private static String codiAcces;
    private static final String DATE_PATTERN = "yyyy-MM-dd";
    
    public RegistrarReservaView(String codi) {
        codiAcces = codi;
        initComponents();
    }
    
    public RegistrarReservaView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBuscarDisponibilitat = new javax.swing.JButton();
        inputContrasenya = new javax.swing.JLabel();
        selectOficina = new javax.swing.JComboBox<>();
        dataInici = new com.toedter.calendar.JDateChooser();
        dataFi = new com.toedter.calendar.JDateChooser();
        btnFerReserva = new javax.swing.JButton();
        btnCancellarReserva = new javax.swing.JButton();

        setTitle("FEM_Coworking");

        jLabel1.setText("Data inici (aaaa-mm-dd)");
        jLabel1.setToolTipText("Data inicni (aaaa-mm-dd)");

        jLabel2.setText("Data fi (aaaa-mm-dd)");
        jLabel2.setToolTipText("Data fi (aaaa-mm-dd)");

        btnBuscarDisponibilitat.setText("Buscar disponibilitat");
        btnBuscarDisponibilitat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarDisponibilitatActionPerformed(evt);
            }
        });

        inputContrasenya.setText("Oficina");

        selectOficina.setEnabled(false);

        dataInici.setDateFormatString("yyyy-MM-dd");

        dataFi.setDateFormatString("yyyy-MM-dd");

        btnFerReserva.setText("Fer reserva");
        btnFerReserva.setEnabled(false);
        btnFerReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFerReservaActionPerformed(evt);
            }
        });

        btnCancellarReserva.setText("Cancel·lar reserva");
        btnCancellarReserva.setEnabled(false);
        btnCancellarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancellarReservaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(dataInici, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                .addComponent(dataFi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(34, 34, 34)
                            .addComponent(inputContrasenya)
                            .addGap(109, 109, 109)
                            .addComponent(selectOficina, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(108, 108, 108)
                            .addComponent(btnBuscarDisponibilitat)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnFerReserva)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancellarReserva)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(dataInici, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataFi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBuscarDisponibilitat)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputContrasenya)
                    .addComponent(selectOficina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFerReserva)
                    .addComponent(btnCancellarReserva))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarDisponibilitatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarDisponibilitatActionPerformed
        if (null == dataInici.getDate() && null == dataFi.getDate()) {
            new SimpleDialog().errorMessage("Les dates són obligatories");
            deshabilitarCrearReserva();
            return;
        } else {
            if (null == dataInici.getDate()) {
                new SimpleDialog().errorMessage("Data inici és obligatoria");
                deshabilitarCrearReserva();
                return;
            } else if (null == dataFi.getDate()) {
                new SimpleDialog().errorMessage("Data fi és obligatoria");
                deshabilitarCrearReserva();
                return;
            }
            
            if (dataInici.getDate().compareTo(dataFi.getDate()) > 0) {
                new SimpleDialog().errorMessage("Data fi és anterior a data inici");
                deshabilitarCrearReserva();
                return;
            }
            
            carregarOficinesDisponibles(dataInici.getDate(), dataFi.getDate());
            
        }
    }//GEN-LAST:event_btnBuscarDisponibilitatActionPerformed

    private void btnFerReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFerReservaActionPerformed
        DTOReserva reserva = new DTOReserva();
        
        try {
            OficinaVO oficinaSeleccionada=(OficinaVO)selectOficina.getSelectedItem();
            String idOficina = oficinaSeleccionada.getIdOficina();

            SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_PATTERN);            
            String inici = dateFormat.format(dataInici.getDate());
            String fi = dateFormat.format(dataFi.getDate());
                    
            JSONObject response = reserva.reservaOficina(
                codiAcces, 
                idOficina, 
                inici, 
                fi);
                        
            if (200 != response.getInt("code")) {
                new SimpleDialog().errorMessage(response.getString("message"));
            } else {
                new SimpleDialog().infoMessage(response.getString("message"));
                this.dispose();
            }
            
        } catch (IOException ex) {
            Logger.getLogger(LlistatOficinesView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFerReservaActionPerformed

    private void btnCancellarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancellarReservaActionPerformed
        selectOficina.removeAllItems();
        selectOficina.setEnabled(false);
        btnFerReserva.setEnabled(false);
        btnCancellarReserva.setEnabled(false);
        
        dataInici.cleanup();
        dataFi.cleanup();
    }//GEN-LAST:event_btnCancellarReservaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarReservaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarReservaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarReservaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarReservaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarReservaView().setVisible(true);
            }
        });
    }
    
    /**
     * Carrega de les oficines disponibles en el selector
     *
     * @param dataInici
     * @param dataFi 
     */
    private void carregarOficinesDisponibles(Date dataInici, Date dataFi) {
        DTOOficina oficina = new DTOOficina();
        
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_PATTERN);
        
            String inici = dateFormat.format(dataInici);
            String fi = dateFormat.format(dataFi);
            JSONObject response = oficina.llistatOficinesDisponibles(codiAcces, inici, fi);
            
            if (200 != response.getInt("code")) {
                System.out.println(response.getString("message"));
                JSONObject jsonResponse = new JSONObject(response.getString("message"));
                new SimpleDialog().errorMessage(jsonResponse.get("message").toString());
            } else {
                selectOficina.removeAllItems();
                List<OficinaVO> llistatOficines = new ObjectMapper().readValue(
                    response.getString("message"),
                    new TypeReference<List<OficinaVO>>() {}
                );
                
                if (0 == llistatOficines.size()) {
                    new SimpleDialog().infoMessage("No s'han trobat oficines disponbles");
                    deshabilitarCrearReserva();
                } else {
                    for (OficinaVO oficinaInfo: llistatOficines) {
                        selectOficina.addItem(oficinaInfo);
                    }
                    habilitarCrearReserva();
                }
            }
            
        } catch (IOException ex) {
            Logger.getLogger(LlistatOficinesView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Activar els controls per finalitzar creació de reserva
     */
    private void habilitarCrearReserva() {
        selectOficina.setEnabled(true);
        btnFerReserva.setEnabled(true);
        btnCancellarReserva.setEnabled(true);
    }
    
    /**
     * Desactivar els controls per finalitzar creació de reserva
     */
    private void deshabilitarCrearReserva() {
        selectOficina.setEnabled(false);
        btnFerReserva.setEnabled(false);
        btnCancellarReserva.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarDisponibilitat;
    private javax.swing.JButton btnCancellarReserva;
    private javax.swing.JButton btnFerReserva;
    private com.toedter.calendar.JDateChooser dataFi;
    private com.toedter.calendar.JDateChooser dataInici;
    private javax.swing.JLabel inputContrasenya;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<OficinaVO> selectOficina;
    // End of variables declaration//GEN-END:variables
}
